import os, re, requests, random
from datetime import datetime
from zoneinfo import ZoneInfo
from flask import Flask, request
from apscheduler.schedulers.background import BackgroundScheduler

# ===== Telegram =====
TOKEN = os.environ["TELEGRAM_TOKEN"]
TG_API = f"https://api.telegram.org/bot{TOKEN}"

# ===== OpenAI =====
from openai import OpenAI
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å gpt-5-mini, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
SYSTEM_PROMPT = os.environ.get("SYSTEM_PROMPT", "You are a helpful assistant. Reply in Russian if the user speaks Russian.")

client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TZ = ZoneInfo(os.environ.get("TZ", "Europe/Minsk"))

# –ö—É–¥–∞ —Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ —è–∑—ã–∫—É
LANG_CHAT_ID = os.environ.get("LANG_CHAT_ID")  # –ø—Ä–∏–º–µ—Ä: "123456789" –∏–ª–∏ "-1001234567890"
RUN_JOBS = os.environ.get("RUN_JOBS", "0") == "1"  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö

app = Flask(__name__)

# ---------- –§–ò–õ–¨–¢–† –ù–ï–¶–ï–ù–ó–£–†–ù–´–• –°–õ–û–í ----------
BAD_WORDS = {
    "–±–ª—è–¥", "–±–ª—è", "—Å—É–∫–∞", "—Ö—É–π", "–ø–∏–∑–¥", "–µ–±–∞", "–µ–±–ª", "–µ–±*", "–º—É–¥–∞–∫",
    "fuck", "shit", "bitch", "asshole", "dick", "fucker", "motherf"
}
BAD_RE = re.compile("|".join(re.escape(w).replace(r"\*", ".*") for w in BAD_WORDS), re.IGNORECASE)
def has_profanity(text: str) -> bool:
    return bool(text and BAD_RE.search(text.lower()))

# ---------- –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –í–û–ü–†–û–°–ê –ü–†–û –ù–û–í–´–ô –ì–û–î ----------
NY_PATTERNS = [
    r"\b—Å–∫–æ–ª—å–∫–æ\s+(–¥–Ω–µ–π|–æ—Å—Ç–∞–ª–æ—Å—å)?\s*–¥–æ\s+(–Ω–æ–≤(–æ–≥–æ)?\s*–≥–æ–¥(–∞)?|–Ω–≥)\b",
    r"\b–¥–æ\s+(–Ω–æ–≤(–æ–≥–æ)?\s*–≥–æ–¥(–∞)?|–Ω–≥)\s*(—Å–∫–æ–ª—å–∫–æ\s*(–æ—Å—Ç–∞–ª–æ—Å—å)?)?\b",
    r"\b–∫–æ–≥–¥–∞\s+–Ω–æ–≤(—ã–π|—ã–π)\s*–≥–æ–¥\b",
]
NY_RE = re.compile("|".join(NY_PATTERNS), re.IGNORECASE)
def is_new_year_query(text: str) -> bool:
    return bool(text and NY_RE.search(text))

def time_to_new_year_str() -> str:
    now = datetime.now(TZ)
    target = datetime(now.year + 1, 1, 1, 0, 0, 0, tzinfo=TZ)
    delta = target - now
    total_seconds = int(delta.total_seconds())
    days = total_seconds // 86400
    hours = (total_seconds % 86400) // 3600
    minutes = (total_seconds % 3600) // 60

    def plural(n, f1, f2, f5):
        n = abs(n) % 100
        n1 = n % 10
        if 11 <= n <= 19: return f5
        if 1 == n1: return f1
        if 2 <= n1 <= 4: return f2
        return f5

    parts = []
    if days:    parts.append(f"{days} {plural(days,'–¥–µ–Ω—å','–¥–Ω—è','–¥–Ω–µ–π')}")
    if hours:   parts.append(f"{hours} {plural(hours,'—á–∞—Å','—á–∞—Å–∞','—á–∞—Å–æ–≤')}")
    if minutes: parts.append(f"{minutes} {plural(minutes,'–º–∏–Ω—É—Ç–∞','–º–∏–Ω—É—Ç—ã','–º–∏–Ω—É—Ç')}")
    if not parts: parts.append("–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã")
    return "–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: " + ", ".join(parts) + f" (—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ.key})."

# ---------- GPT-–≤—ã–∑–æ–≤ ----------
def ask_gpt(prompt: str) -> str:
    if not client:
        return "‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ Variables Railway."
    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=700,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {e}"

# ---------- –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ü–û –ê–ù–ì–õ–ò–ô–°–ö–û–ú–£ ----------
WORDS = [
    ("adventure", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "I had an amazing adventure last summer."),
    ("discover", "–æ—Ç–∫—Ä—ã–≤–∞—Ç—å", "They discovered a hidden cave."),
    ("beautiful", "–∫—Ä–∞—Å–∏–≤—ã–π", "This is the most beautiful place I've ever seen."),
    ("challenge", "–≤—ã–∑–æ–≤", "Learning a new language is a challenge."),
    ("enjoy", "–Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è", "I enjoy reading books in the evening."),
    ("attempt", "–ø–æ–ø—ã—Ç–∫–∞", "This is my second attempt."),
    ("improve", "—É–ª—É—á—à–∞—Ç—å", "I want to improve my English."),
]

def build_daily_task() -> str:
    word, translation, example = random.choice(WORDS)
    task_text = (
        "üìö *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É*\n\n"
        f"**–°–ª–æ–≤–æ –¥–Ω—è:** {word} ‚Äî {translation}\n"
        f"**–ü—Ä–∏–º–µ—Ä:** {example}\n\n"
        "‚úèÔ∏è *–ó–∞–¥–∞–Ω–∏–µ:* –ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—Ä–∞–∑—É:\n"
        f"‚Äî ¬´–í—á–µ—Ä–∞ —è {translation}¬ª.\n\n"
        "_–û—Ç–≤–µ—Ç—å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ. –ö–æ–º–∞–Ω–¥–∞ /lang ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å._"
    )
    return task_text

def send_daily_english_task():
    if not LANG_CHAT_ID:
        print("‚ö†Ô∏è LANG_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É")
        return
    text = build_daily_task()
    requests.post(f"{TG_API}/sendMessage", json={
        "chat_id": LANG_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    })
    print(f"[{datetime.now(TZ)}] –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {LANG_CHAT_ID}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ—Ä–∫–µ—Ä–∞—Ö)
if RUN_JOBS:
    scheduler = BackgroundScheduler(timezone=str(TZ))
    scheduler.add_job(send_daily_english_task, "cron", hour=8, minute=0, id="lang_daily", replace_existing=True)
    scheduler.start()

@app.get("/")
def health():
    return "ok"

@app.post("/webhook")
def webhook():
    update = request.get_json(silent=True) or {}
    message = update.get("message") or update.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    chat_type = chat.get("type")  # private | group | supergroup | channel
    text = (message.get("text") or "").strip()
    msg_id = message.get("message_id")

    print("UPDATE:", update, flush=True)

    # 1) –ú–æ–¥–µ—Ä–∞—Ü–∏—è: —É–¥–∞–ª—è–µ–º –º–∞—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö
    if chat_id and msg_id and chat_type in ("group", "supergroup") and has_profanity(text):
        requests.post(f"{TG_API}/deleteMessage", json={"chat_id": chat_id, "message_id": msg_id})
        requests.post(f"{TG_API}/sendMessage", json={
            "chat_id": chat_id,
            "text": "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞.",
        })
        return "ok"

    # 2) –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ù–æ–≤—ã–π –≥–æ–¥ (–≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö)
    if chat_id and is_new_year_query(text):
        requests.post(f"{TG_API}/sendMessage", json={
            "chat_id": chat_id,
            "text": time_to_new_year_str(),
            "reply_to_message_id": msg_id
        })
        return "ok"

    # 2.1) –ö–æ–º–∞–Ω–¥–∞ /lang ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å
    if chat_id and text.lower().startswith("/lang"):
        requests.post(f"{TG_API}/sendMessage", json={
            "chat_id": chat_id,
            "text": build_daily_task(),
            "parse_mode": "Markdown",
            "reply_to_message_id": msg_id
        })
        return "ok"

    # 3) GPT: –∫–æ–º–∞–Ω–¥–∞ /gpt <–≤–æ–ø—Ä–æ—Å> (–≤ –≥—Ä—É–ø–ø–µ –∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫–µ)
    if chat_id and (text.lower().startswith("/gpt ") or text.lower() == "/gpt"):
        query = text[4:].strip() or "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
        answer = ask_gpt(query)
        if len(answer) > 3500:
            answer = answer[:3500] + "‚Ä¶"
        requests.post(f"{TG_API}/sendMessage", json={
            "chat_id": chat_id,
            "text": answer,
            "reply_to_message_id": msg_id
        })
        return "ok"

    # 4) –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∏–≤–∞—Ç–∫–µ (—ç—Ö–æ)
    if chat_type == "private" and chat_id:
        reply = f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {text}" if text else "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å."
        requests.post(f"{TG_API}/sendMessage", json={"chat_id": chat_id, "text": reply})

    return "ok"

if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Railway –Ω–∞—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç gunicorn)
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
